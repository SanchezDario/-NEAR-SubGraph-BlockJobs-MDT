// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Dispute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("serviceId", Value.fromString(""));
    this.set("applicant", Value.fromString(""));
    this.set("accused", Value.fromString(""));
    this.set("initialTime", Value.fromBigInt(BigInt.zero()));
    this.set("applicantProves", Value.fromString(""));
    this.set("accusedProves", Value.fromString(""));
    this.set("price", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dispute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Dispute entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Dispute", id.toString(), this);
    }
  }

  static load(id: string): Dispute | null {
    return changetype<Dispute | null>(store.get("Dispute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get serviceId(): string {
    let value = this.get("serviceId");
    return value!.toString();
  }

  set serviceId(value: string) {
    this.set("serviceId", Value.fromString(value));
  }

  get applicant(): string {
    let value = this.get("applicant");
    return value!.toString();
  }

  set applicant(value: string) {
    this.set("applicant", Value.fromString(value));
  }

  get accused(): string {
    let value = this.get("accused");
    return value!.toString();
  }

  set accused(value: string) {
    this.set("accused", Value.fromString(value));
  }

  get initialTime(): BigInt {
    let value = this.get("initialTime");
    return value!.toBigInt();
  }

  set initialTime(value: BigInt) {
    this.set("initialTime", Value.fromBigInt(value));
  }

  get finalTime(): BigInt | null {
    let value = this.get("finalTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set finalTime(value: BigInt | null) {
    if (!value) {
      this.unset("finalTime");
    } else {
      this.set("finalTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get jury(): Array<string> | null {
    let value = this.get("jury");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set jury(value: Array<string> | null) {
    if (!value) {
      this.unset("jury");
    } else {
      this.set("jury", Value.fromStringArray(<Array<string>>value));
    }
  }

  get votes(): Array<boolean> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBooleanArray();
    }
  }

  set votes(value: Array<boolean> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromBooleanArray(<Array<boolean>>value));
    }
  }

  get state(): string | null {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set state(value: string | null) {
    if (!value) {
      this.unset("state");
    } else {
      this.set("state", Value.fromString(<string>value));
    }
  }

  get winner(): string | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winner(value: string | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromString(<string>value));
    }
  }

  get applicantProves(): string {
    let value = this.get("applicantProves");
    return value!.toString();
  }

  set applicantProves(value: string) {
    this.set("applicantProves", Value.fromString(value));
  }

  get accusedProves(): string {
    let value = this.get("accusedProves");
    return value!.toString();
  }

  set accusedProves(value: string) {
    this.set("accusedProves", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }
}
